Description:

You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Code:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        r = (l1.val +l2.val)//10
        head = ListNode((l1.val+l2.val)%10)
        if l1.next == None:
            if l2.next == None:
                if r!=0:
                    head.next = ListNode(r)
                return head
            l1.next = ListNode(r)
        elif l2.next == None:
            l2.next = ListNode(r)
        else:
            l2.next.val = l2.next.val + r
        head.next = self.addTwoNumbers(l1.next,l2.next)
        return head
